(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{433:function(t,s,a){"use strict";a.r(s);var e=a(42),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h3",{attrs:{id:"ajax"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ajax"}},[t._v("#")]),t._v(" ajax")]),t._v(" "),a("p",[t._v("var xhr = new XMLHttpRequest();\nxhr的用法：")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("xhr.open('get',url,true/false)\nopen接收三个参数：1.请求方法。2.请求url。3.同步或者异步。")])]),t._v(" "),a("li",[a("p",[t._v('xhr.send(null)\nsend()方法接收一个参数，即要作为请求主体发送的数据。如果不需要通过请求主体发送\n数据，则必须传入 null，因为这个参数对有些浏览器来说是必需的。\n3.响应数据属性：\n responseText：作为响应主体被返回的文本。\n responseXML：如果响应的内容类型是"text/xml"或"application/xml"，这个属性中将保\n存包含着响应数据的 XML DOM 文档。\n status：响应的 HTTP 状态。\n statusText：HTTP 状态的说明')])]),t._v(" "),a("li",[a("p",[t._v("readyState属性：该属性表示请求\n/响应过程的当前活动阶段。\n0：未初始化。尚未调用 open()方法。\n 1：启动。已经调用 open()方法，但尚未调用 send()方法。\n 2：发送。已经调用 send()方法，但尚未接收到响应。\n 3：接收。已经接收到部分响应数据。\n 4：完成。已经接收到全部响应数据，而且已经可以在客户端使用了。\n注意：只要readyState属性的值由一个值变成另一个值，都会触发一次readystatechange")])]),t._v(" "),a("li",[a("p",[t._v("xhr.abort(); 取消异步请求")])])]),t._v(" "),a("h4",{attrs:{id:"请求头："}},[a("a",{staticClass:"header-anchor",attrs:{href:"#请求头："}},[t._v("#")]),t._v(" 请求头：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v(" Accept：浏览器能够处理的内容类型。\n Accept-Charset：浏览器能够显示的字符集。\n Accept-Encoding：浏览器能够处理的压缩编码。\n Accept-Language：浏览器当前设置的语言。\n Connection：浏览器与服务器之间连接的类型。\n Cookie：当前页面设置的任何 Cookie。  Host：发出请求的页面所在的域 。  Referer：发出请求的页面的 URI。注意，HTTP 规范将这个头部字段拼写错了，而为保证与规\n范一致，也只能将错就错了。（这个英文单词的正确拼法应该是 referrer。）\n User-Agent：浏览器的用户代理字符串。\n")])])]),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("自定义请求头信息"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\nxhr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setRequestHeader")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"MyHeader"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"MyValue"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h4",{attrs:{id:"跨源资源共享"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#跨源资源共享"}},[t._v("#")]),t._v(" 跨源资源共享")]),t._v(" "),a("p",[t._v("CORS背后的基本思想，就是使用自定义的HTTP头部让浏览器与服务器进行沟通，从而决定请求或者响应是否成功。")]),t._v(" "),a("h4",{attrs:{id:"带凭据的请求"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#带凭据的请求"}},[t._v("#")]),t._v(" 带凭据的请求")]),t._v(" "),a("p",[t._v("默认情况下，跨域请求不提供凭证（cookie,http认证以及客户端SSL证明等）。通过将withCredentials属性设置为true，可以指定某个请求应该发送凭据。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("如果服务器接受带凭据的请\n求，会用下面的 "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("HTTP")]),t._v(" 头部来响应。\nAccess"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Control"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Allow"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Credentials"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n")])])]),a("h4",{attrs:{id:"其他跨域技术"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#其他跨域技术"}},[t._v("#")]),t._v(" 其他跨域技术")]),t._v(" "),a("p",[t._v("1.使用img标签，动态创建图形：")]),t._v(" "),a("p",[t._v("图像 Ping 最常用于跟踪用户点击页面或动态广告曝光次数。图像 Ping 有两个主要的缺点，一是只\n能发送 GET 请求，二是无法访问服务器的响应文本。因此，图像 Ping 只能用于浏览器与服务器间的单\n向通信。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" img "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Image")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \nimg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("onload "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" img"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("onerror")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Done!"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \nimg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("src "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"http://www.example.com/test?name=Nicholas"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("ol",{attrs:{start:"2"}},[a("li",[t._v("JSONP:\nJSONP 是通过动态script元素,来使用的，使用时可以为\nsrc 属性指定一个跨域 URL。\n优点： 能够直接访问响应文本，支持在浏览器与服务器之间双向通信。\n缺点：1. JSONP 是从其他域中加载代码执行。如果其他域不安全，很可能会在响应中夹带一些恶意代\n码，而此时除了完全放弃 JSONP 调用之外，没有办法追究。")]),t._v(" "),a("li",[t._v("要确定 JSONP 请求是否失败并不容易。虽然 HTML5 给script元素新增了一个 onerror\n事件处理程序，但目前还没有得到任何浏览器支持。为此，开发人员不得不使用计时器检测指定时间内是否接收到了响应。")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("因为 "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("JSONP")]),t._v(" 是有效的 JavaScript 代码，所以在请求完成后，即在 "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("JSONP")]),t._v(" 响应加载到页面中\n以后，就会立即执行\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" script "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" document"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("createElement")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"script"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \nscript"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("src "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"http://freegeoip.net/json/?callback=handleResponse"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \ndocument"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("body"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("insertBefore")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("script"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" document"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("body"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("firstChild"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n")])])]),a("h4",{attrs:{id:"comet"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#comet"}},[t._v("#")]),t._v(" Comet")]),t._v(" "),a("p",[t._v("Ajax 是一种从页面向服务器请求数据的技术，而 Comet 则是一种服务器向页面推送数据的技\n术。非常适合处理体育比赛的分数和股票报价。\n有两种实现Comet的方式：")]),t._v(" "),a("ol",[a("li",[t._v("长轮询。长轮询是浏览器定时向服务器发送请求，看有没有更新的数据。")]),t._v(" "),a("li",[t._v("HTTP 流。")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("使用场景--待补充。\n")])])]),a("p",[t._v("服务器发送事件:SSE:是围绕只读 Comet 交互推出的 API 或者模式。SSE API\n用于创建到服务器的单向连接，服务器通过这个连接可以发送任意数量的数据。服务器响应的 MIME\n类型必须是 text/event-stream，")]),t._v(" "),a("h4",{attrs:{id:"web-sockets"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#web-sockets"}},[t._v("#")]),t._v(" Web Sockets")]),t._v(" "),a("p",[t._v("websockers在一个单独的持久连接上提供全双工，双向通信。在 JavaScript 中创建了 Web Socket 之后，会有一个 HTTP 请求发送\n到浏览器以发起连接。在取得服务器响应后，建立的连接会使用 HTTP 升级从 HTTP 协议交换为 Web\nSocket 协议。也就是说，使用标准的 HTTP 服务器无法实现 Web Sockets，只有支持这种协议的专门服\n务器才能正常工作。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("由于 Web Sockets 使用了自定义的协议，所以 URL 模式也略有不同。未加密的连接不再是 http://，\n而是 ws://；加密的连接也不是 https://，而是 wss://。\n")])])]),a("ol",[a("li",[t._v('Web Sockets API\nvar socket = new WebSocket("ws://www.example.com/server.php");')])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v(" WebSocket.OPENING (0)：正在建立连接。\n WebSocket.OPEN (1)：已经建立连接。\n WebSocket.CLOSING (2)：正在关闭连接。\n WebSocket.CLOSE (3)：已经关闭连接。\n\n")])])]),a("p",[t._v("2 .发送和接收数据")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('socket.send("Hello world!");\n')])])]),a("ol",{attrs:{start:"3"}},[a("li",[t._v("WebSocket 对象还有其他三个事件，在连接生命周期的不同阶段触发。\n open：在成功建立连接时触发。\n error：在发生错误时触发，连接不能持续。\n close：在连接关闭时触发。")])]),t._v(" "),a("h4",{attrs:{id:"sse与web-sockets选择"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sse与web-sockets选择"}},[t._v("#")]),t._v(" SSE与Web Sockets选择")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("面对某个具体的用例，在考虑是使用 SSE 还是使用 Web Sockets 时，可以考虑如下几个因素。\n1. 你是否有自由度建立和维护 Web Sockets 服务器？因为 Web Socket 协议不同于 HTTP，所以现有服务器\n不能用于 Web Socket 通信。\n2. 到底需不需要双向通信。如果用例只需读取服务器数据（如比赛成绩），那\n么 SSE 比较容易实现。如果用例必须双向通信（如聊天室），那么 Web Sockets 显然更好。别忘了，在\n不能选择 Web Sockets 的情况下，组合 XHR 和 SSE 也是能实现双向通信的。\n")])])]),a("h4",{attrs:{id:"安全"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#安全"}},[t._v("#")]),t._v(" 安全")]),t._v(" "),a("p",[t._v("1.CSRF(cross-site request forgery):跨站请求伪造。\n为确保XHR访问的url安全，通常的做法就是验证发送请求着是否有权限访问相应的资源。\n方法：1.要求以SSL连接来访问可以通过XHR请求的资源。\n2. 要求每一次请求都要附带经过相应算法计算得到的验证码。")])])}),[],!1,null,null,null);s.default=n.exports}}]);