(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{427:function(a,e,t){"use strict";t.r(e);var s=t(42),n=Object(s.a)({},(function(){var a=this,e=a.$createElement,t=a._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h3",{attrs:{id:"跨文档消息传递"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#跨文档消息传递"}},[a._v("#")]),a._v(" 跨文档消息传递")]),a._v(" "),t("ol",[t("li",[a._v("postMessage()方法允许来自不同源的脚本采用异步方式进行有限的通信，可以实现跨文本档、多窗口、跨域消息传递")]),a._v(" "),t("li",[a._v('postMessage(data,origin)方法接受两个参数：1.data:要传递的数据。2.origin：字符串参数，指明目标窗口的源，协议+主机+端口号[+URL]，如果要指定和当前窗口同源的话设置为"/"；')]),a._v(" "),t("li",[a._v("传递与监听：")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("//监听值\nwindow.addEventListener('message',function(e){\n　　console.log(e.data)\n},false)\n\n//传递值\nwindow.top.postMessage('message from iframe1');\n")])])]),t("h4",{attrs:{id:"原生拖放"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#原生拖放"}},[a._v("#")]),a._v(" 原生拖放")]),a._v(" "),t("p",[a._v("拖动元素时，将触发以下事件：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("1. dragstart\n2. drag\n3. dragend\n当某个元素被拖动到一个有效放置目标上时，下列事件会依次触发：\n1. dragenter\n2. dragover\n3. dragleave 或者drop\n\n拖动开始时，可以通过ondragstart事件处理程序来运行js代码。\n")])])]),t("p",[a._v("dataTransfer对象：用于从被拖动元素向放置目标传递字符串格式的数据。\ndataTransfer 对象有两个主要方法：getData()和 setData()。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('var dataTransfer = event.dataTransfer; \n//读取 URL \nvar url = dataTransfer.getData("url") ||dataTransfer.getData("text/uri-list"); \n//读取文本\nvar text = dataTransfer.getData("Text");\n')])])]),t("p",[a._v("可拖动属性：HTML5 为所有 HTML 元素规定了一个 draggable 属性，表\n示元素是否可以拖动。")]),a._v(" "),t("h4",{attrs:{id:"媒体元素"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#媒体元素"}},[a._v("#")]),a._v(" 媒体元素")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('<audio><audio>// 嵌入音频\n<video><video>// 嵌入视频\n\n因为并非所有浏览器都支持所有媒体格式，所以可以指定多个不同的媒体来源。为此，不用在标签\n中指定 src 属性，而是要像下面这样使用一或多个<source>元素。\n\x3c!-- 嵌入视频 --\x3e \n<video id="myVideo"> \n <source src="conference.webm" type="video/webm; codecs=\'vp8, vorbis\'"> \n <source src="conference.ogv" type="video/ogg; codecs=\'theora, vorbis\'"> \n <source src="conference.mpg"> \n Video player not available. \n</video> \n\x3c!-- 嵌入音频 --\x3e \n<audio id="myAudio"> \n <source src="song.ogg" type="audio/ogg"> \n <source src="song.mp3" type="audio/mpeg"> \n Audio player not available. \n</audio>\n')])])]),t("h4",{attrs:{id:"历史状态管理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#历史状态管理"}},[a._v("#")]),a._v(" 历史状态管理")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('history.pushState():可以在不加载新页面的情况下改变浏览器的 URL。并将新的信息加入到历史状态栈。可以后退，前进。\n参数：\n状态对象、新状态的标题和可选的相对 URL。\nhistory.pushState({name:"Nicholas"}, "Nicholas\' page", "nicholas.html");\n\n此时，点击后退按钮，会触发 window 对象的 popstate 事件，\npopstate 事件的事件对象有一个 state 属性，这个\n属性就包含着当初以第一个参数传递给 pushState()的状态对象。\nEventUtil.addHandler(window, "popstate", function(event){ \n var state = event.state; \n if (state){ //第一个页面加载时 state 为空\n processState(state); \n } \n});\n\n更新当前状态，可以调用 replaceState()\nhistory.replaceState({name:"Greg"}, "Greg\'s page");\n\n')])])])])}),[],!1,null,null,null);e.default=n.exports}}]);