(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{434:function(e,n,t){"use strict";t.r(n);var s=t(42),a=Object(s.a)({},(function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h3",{attrs:{id:"node类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#node类型"}},[e._v("#")]),e._v(" node类型")]),e._v(" "),t("p",[e._v("DOM可以将任何HTML或xml描述成一个由多层节点构成的结构。")]),e._v(" "),t("p",[e._v("节点属性：\nnodeType：表明节点的类型。元素节点：值为1.属性节点：2.\nnodeName：标签的名字。返回的是大写。\nnodeValue：null。")]),e._v(" "),t("p",[e._v("节点关系属性：\nchildNodes：获取当前节点子集数组。取子元素的方式可以用item或者[0]")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var firstChild = someNode.childNodes[0]; \nvar secondChild = someNode.childNodes.item(1);\n")])])]),t("p",[e._v("parentNode:获取当前节点的父节点\npreviousSibling：前一个兄弟节点\nnextSibling：下一个兄弟节点\nfirstChild：childNodes 列表中的第一个\nlastChild：childNodes 列表中的最后一个")]),e._v(" "),t("p",[e._v("操作节点：\nappendChild()：向节点的末尾添加一个节点.返回新增的节点。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var newNode = document.createElement('LI')\nvar returnedNode = someNode.appendChild(newNode); \n\n")])])]),t("p",[e._v("insertBefore():可以把节点放到特定的位置。这个方法接受两个参数：要插入的节点和作为参照的节点。"),t("br"),e._v("\n如果参照节点是\nnull，则 insertBefore()与 appendChild()执行相同的操作。"),t("br"),e._v("\nreplaceChild()：接受的两个参数是：要插入的节点和要替换的节点"),t("br"),e._v("\nremoveChild():接受一个参数，即要移除\n的节点")]),e._v(" "),t("p",[e._v("其他方法：\ncloneNode()：someNode.cloneNode(true):深copy，会复制节点及其整个子节点树。someNode.cloneNode(false):浅copy，只复制节点本身。")]),e._v(" "),t("h4",{attrs:{id:"document类型："}},[t("a",{staticClass:"header-anchor",attrs:{href:"#document类型："}},[e._v("#")]),e._v(" document类型：")]),e._v(" "),t("p",[e._v("document.documentElement，firstChild，childNodes[0]：指向html标签"),t("br"),e._v("\ndocument.body:指向body\ndocument.title：标题名\ndocument.url:取得当前页面的完整url\ndocument.domain:当前页面的域名。可设置。\ndocument.referrer：来源页面的url，没有的时候为空")]),e._v(" "),t("h4",{attrs:{id:"element类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#element类型"}},[e._v("#")]),e._v(" Element类型")]),e._v(" "),t("p",[e._v("HTMLElement 类型直接继承自Element 并添加了一些属性\nid，元素在文档中的唯一标识符。"),t("br"),e._v("\ntitle，有关元素的附加说明信息，一般通过工具提示条显示出来。"),t("br"),e._v("\nlang，元素内容的语言代码，很少使用。"),t("br"),e._v("\nclassName，与元素的class 特性对应，即为元素指定的CSS类。没有将这个属性命名为class")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('var div = document.getElementById("myDiv"); \nalert(div.id); //"myDiv"" \nalert(div.className); //"bd" \nalert(div.title); //"Body text" \nalert(div.lang); //"en" \nalert(div.dir); //"ltr"\n')])])]),t("p",[e._v("属性：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('获取属性\nvar div = document.getElementById("myDiv"); \nalert(div.getAttribute("id")); //"myDiv"\n//设置属性\ndiv.setAttribute("id",\'aa\')\n//删除属性\ndiv.removeAttribute("id")\n')])])]),t("p",[e._v("attributes 属性：获取属性的合集。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("getNamedItem(name)：返回 nodeName 属性等于 name 的节点；\n removeNamedItem(name)：从列表中移除 nodeName 属性等于 name 的节点；\n setNamedItem(node)：向列表中添加节点，以节点的 nodeName 属性为索引；\n item(pos)：返回位于数字 pos 位置处的节点。\nattributes 属性中包含一系列节点，每个节点的 nodeN\n")])])]),t("p",[e._v("创建元素：\ndocument.createElement()")]),e._v(" "),t("h4",{attrs:{id:"text类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#text类型"}},[e._v("#")]),e._v(" Text类型")]),e._v(" "),t("p",[e._v("创建文本：\ndocument.createTextNode('aa')")]),e._v(" "),t("h4",{attrs:{id:"创建动态脚本"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#创建动态脚本"}},[e._v("#")]),e._v(" 创建动态脚本")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('function loadScriptString(code){ \nvar script = document.createElement("script"); \nscript.type = "text/javascript"; \ntry { \nscript.appendChild(document.createTextNode(code)); \n} catch (ex){ \nscript.text = code; \n} \ndocument.body.appendChild(script); \n}\n')])])]),t("h4",{attrs:{id:"创建动态样式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#创建动态样式"}},[e._v("#")]),e._v(" 创建动态样式")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var link = document.createElement('link')\nlink.rel = 'stylesheet'\nlink.type = 'text/css'\nlink.href='style.css'\nvar head = document.getElementsByTagName('head')[0]\nhead.appendChild(link)\n\n\n")])])]),t("h4",{attrs:{id:"检测代码："}},[t("a",{staticClass:"header-anchor",attrs:{href:"#检测代码："}},[e._v("#")]),e._v(" 检测代码：")]),e._v(" "),t("p",[e._v("以下是完整的用户代理字符串检测脚本，包括检测呈现引擎、平台、Windows 操作系统、移动设备\n和游戏系统。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('var client = function(){ \n //呈现引擎\n var engine = { \n ie: 0, \n gecko: 0, \n webkit: 0, \n khtml: 0, \n opera: 0, \n \n //完整的版本号\n ver: null \n }; \n //浏览器\n var browser = { \n \n //主要浏览器\n ie: 0, \n firefox: 0, \n safari: 0, \n konq: 0, \n opera: 0,\n chrome: 0, \n \n //具体的版本号\n ver: null \n }; \n //平台、设备和操作系统\n var system = { \n win: false, \n mac: false, \n x11: false, \n \n //移动设备\n iphone: false, \n ipod: false, \n ipad: false, \n ios: false, \n android: false, \n nokiaN: false, \n winMobile: false, \n \n //游戏系统\n wii: false, \n ps: false \n };\n //检测呈现引擎和浏览器\n var ua = navigator.userAgent; \n if (window.opera){ \n engine.ver = browser.ver = window.opera.version(); \n engine.opera = browser.opera = parseFloat(engine.ver); \n } else if (/AppleWebKit\\/(\\S+)/.test(ua)){ \n engine.ver = RegExp["$1"]; \n engine.webkit = parseFloat(engine.ver); \n \n //确定是 Chrome 还是 Safari \n if (/Chrome\\/(\\S+)/.test(ua)){ \n browser.ver = RegExp["$1"]; \n browser.chrome = parseFloat(browser.ver); \n } else if (/Version\\/(\\S+)/.test(ua)){ \n browser.ver = RegExp["$1"]; \n browser.safari = parseFloat(browser.ver); \n } else { \n //近似地确定版本号\n var safariVersion = 1; \n if (engine.webkit < 100){ \n safariVersion = 1; \n } else if (engine.webkit < 312){ \n safariVersion = 1.2; \n } else if (engine.webkit < 412){ \n safariVersion = 1.3; \n } else { \n safariVersion = 2; \n } \n \n browser.safari = browser.ver = safariVersion; \n }\n } else if (/KHTML\\/(\\S+)/.test(ua) || /Konqueror\\/([^;]+)/.test(ua)){ \n engine.ver = browser.ver = RegExp["$1"]; \n engine.khtml = browser.konq = parseFloat(engine.ver); \n } else if (/rv:([^\\)]+)\\) Gecko\\/\\d{8}/.test(ua)){ \n engine.ver = RegExp["$1"]; \n engine.gecko = parseFloat(engine.ver); \n \n //确定是不是 Firefox \n if (/Firefox\\/(\\S+)/.test(ua)){ \n browser.ver = RegExp["$1"]; \n browser.firefox = parseFloat(browser.ver); \n } \n } else if (/MSIE ([^;]+)/.test(ua)){ \n engine.ver = browser.ver = RegExp["$1"]; \n engine.ie = browser.ie = parseFloat(engine.ver); \n } \n //检测浏览器\n browser.ie = engine.ie; \n browser.opera = engine.opera; \n //检测平台\n var p = navigator.platform; \n system.win = p.indexOf("Win") == 0; \n system.mac = p.indexOf("Mac") == 0; \n system.x11 = (p == "X11") || (p.indexOf("Linux") == 0);\n //检测 Windows 操作系统\n if (system.win){ \n if (/Win(?:dows )?([^do]{2})\\s?(\\d+\\.\\d+)?/.test(ua)){ \n if (RegExp["$1"] == "NT"){ \n switch(RegExp["$2"]){ \n case "5.0": \n system.win = "2000"; \n break; \n case "5.1": \n system.win = "XP"; \n break; \n case "6.0": \n system.win = "Vista"; \n break; \n case "6.1": \n system.win = "7"; \n break; \n default: \n system.win = "NT"; \n break; \n } \n } else if (RegExp["$1"] == "9x"){ \n system.win = "ME"; \n } else { \n system.win = RegExp["$1"]; \n } \n } \n } \n //移动设备\n system.iphone = ua.indexOf("iPhone") > -1; \n system.ipod = ua.indexOf("iPod") > -1; \n system.ipad = ua.indexOf("iPad") > -1; \n system.nokiaN = ua.indexOf("NokiaN") > -1; \n //windows mobile \n if (system.win == "CE"){ \n system.winMobile = system.win; \n } else if (system.win == "Ph"){ \n if(/Windows Phone OS (\\d+.\\d+)/.test(ua)){; \n system.win = "Phone"; \n system.winMobile = parseFloat(RegExp["$1"]); \n } \n } \n \n //检测 iOS 版本\n if (system.mac && ua.indexOf("Mobile") > -1){ \n if (/CPU (?:iPhone )?OS (\\d+_\\d+)/.test(ua)){ \n system.ios = parseFloat(RegExp.$1.replace("_", ".")); \n } else { \n system.ios = 2; //不能真正检测出来，所以只能猜测\n } \n }\n //检测 Android 版本\n if (/Android (\\d+\\.\\d+)/.test(ua)){ \n system.android = parseFloat(RegExp.$1); \n } \n //游戏系统\n system.wii = ua.indexOf("Wii") > -1; \n system.ps = /playstation/i.test(ua); \n //返回这些对象\n return { \n engine: engine, \n browser: browser, \n system: system \n }; \n}();\n')])])]),t("p",[e._v("client.js")])])}),[],!1,null,null,null);n.default=a.exports}}]);